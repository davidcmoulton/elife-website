<?php

/**
 * @file
 * Call the endpoint tests when no authentication is being used.
 *
 */

/**
 * Run test cases for the endpoint with no authentication turned on.
 *
 */
class ElifeServicesResourceArticleTests extends ServicesWebTestCase {
  // Class variables
  protected $privilegedUser = NULL;
  // Endpoint details.
  protected $endpoint = NULL;

  /**
   * Implementation of setUp().
   */
  public function setUp() {
    parent::setUp(
      'ctools',
      'services',
      'rest_server',
      'features',
      'xautoload',
      'elife_article',
      'elife_services'
    );
    $edit = $this->populateEndpointFAPI() ;
    $endpoint = new stdClass;
    $endpoint->disabled = FALSE;
    $endpoint->api_version = 3;
    $endpoint->name = $edit['name'];
    $endpoint->server = $edit['server'];
    $endpoint->path = $edit['path'];
    $endpoint->authentication = array(
      'services' => 'services',
    );
    $endpoint->server_settings = array(
      'formatters' => array(
        'json' => TRUE,
        'bencode' => TRUE,
        'rss' => TRUE,
        'plist' => TRUE,
        'xmlplist' => TRUE,
        'php' => TRUE,
        'yaml' => TRUE,
        'jsonp' => FALSE,
        'xml' => FALSE,
      ),
      'parsers' => array(
        'application/x-yaml' => TRUE,
        'application/json' => TRUE,
        'application/vnd.php.serialized' => TRUE,
        'application/plist' => TRUE,
        'application/plist+xml' => TRUE,
        'application/x-www-form-urlencoded' => TRUE,
        'multipart/form-data' => TRUE,
      ),
    );
    $endpoint->resources = array(
      'article' => array(
        'operations' => array(
          'retrieve' => array(
            'enabled' => '1',
          ),
          'create' => array(
            'enabled' => '1',
          ),
          'update' => array(
            'enabled' => '1',
          ),
          'delete' => array(
            'enabled' => '1',
          ),
        ),
      ),
    );
    $endpoint->debug = 1;
    $endpoint->export_type = FALSE;
    services_endpoint_save($endpoint);
    $endpoint = services_endpoint_load($endpoint->name);
    $this->assertTrue($endpoint->name == $edit['name'], 'Endpoint successfully created');
    $this->endpoint = $endpoint;
  }

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Resource eLife Article',
      'description' => 'Test the resource Article methods and actions.',
      'group' => 'eLife Services',
    );
  }

  /**
   * Testing article_resource Get.
   */
  public function testNewEndpointResourceArticleGet() {
    // Create and log in our privileged user.
    $this->privilegedUser = $this->drupalCreateUser(array(
      'administer services',
    ));
    $this->drupalLogin($this->privilegedUser);

    // Create article with apath value.
    $apath = $this->randomName(10);
    $article = $this->drupalCreateNode(array('type' => 'elife_article', 'field_elife_a_apath' => array(LANGUAGE_NONE => array(array('value' => $apath)))));

    // Retrieve article info via API.
    $responseArray = $this->servicesGet($this->endpoint->path . '/article/' . $apath);
    $this->assertTrue($article->title == $responseArray['body']->title,
      'Successfully received Article info', 'ArticleResource: Retrieve');
    // Verify article not found.
    unset($article);
    $responseArray = $this->servicesGet($this->endpoint->path . '/article/99');
    $this->assertTrue($responseArray['code'] == '404', 'Successfully was rejected to non existent article', 'ArticleResource: Retrieve');
  }

  /**
   * Testing article_resource Delete.
   */
  public function testEndpointResourceArticleDelete() {
    // Create and log in our privileged user.
    $this->privilegedUser = $this->drupalCreateUser(array(
      'administer services',
      'bypass node access',
    ));
    $this->drupalLogin($this->privilegedUser);

    // Create article with apath value.
    $apath = $this->randomName(10);
    $article = $this->drupalCreateNode(array('type' => 'elife_article', 'field_elife_a_apath' => array(LANGUAGE_NONE => array(array('value' => $apath)))));
    $data = '';

    $responseArray = $this->servicesDelete($this->endpoint->path . '/article/' . $apath, $data);
    $deleted_article = node_load($article->nid, NULL, TRUE);
    $this->assertTrue(empty($deleted_article), 'Article was deleted.', 'ArticleResource: Deleted');

    $responseArray = $this->servicesDelete($this->endpoint->path . '/article/' . $apath, $data);

    $this->assertFalse($responseArray['code'] == 200,
      'Article was deleted. It shoudln\'t have been because it doesn\'t exist', 'ArticleResource: Deleted');
  }
}
