<?php
/**
 * @file
 * Code for the eLife Home Page feature.
 */

include_once 'elife_archive.features.inc';

/**
 * Implements hook_menu().
 */
function elife_archive_menu() {
  $items = array();

  $items['archive'] = array(
    'page callback' => '_elife_archive_listing',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Return appropriate listing of months or articles in a month.
 *
 * or return page not found
 */
function _elife_archive_listing() {
  $output = '';

  list($year, $month) = _elife_archive_get_month_year_from_args();

  $expected_path = _elife_archive_get_expected_path($year, $month);

  if (current_path() !== $expected_path) {
    if (!empty($month)) {
      // If the month is missing a '0' (e.g. '9' rather than '09'), redirect.
      return drupal_goto($expected_path);
    }

    return drupal_not_found();
  }

  $view_arguments = [];

  if (!empty($year) && !empty($month)) {
    $view_arguments = [sprintf('%s-%s', $year, $month)];
  }

  $view = views_get_view('elife_archive_by_month');
  $view->execute_display('block_1', $view_arguments);

  if (!empty($view->result) || (empty($year) && empty($month))) {
    $output .= $view->render();

    if ($title = $view->get_title()) {
      drupal_set_title($title);
    }
  }

  if (!empty($output)) {
    return $output;
  }

  return drupal_not_found();
}

/**
 * Implements hook_preprocess_page().
 */
function elife_archive_preprocess_page(&$variables) {
  if (in_array('page__archive', $variables['theme_hook_suggestions'])) {
    $form = drupal_get_form('elife_archive_goto_form');

    $variables['title_suffix'] = '<div class="elife-archive-jumpto">';
    $variables['title_suffix'] .= render($form);
    $variables['title_suffix'] .= '</div>';
    $variables['title_suffix'] .= '<div class="panel-separator"></div>';
  }
}

/**
 * Monthly archive jump to form.
 */
function elife_archive_goto_form($form, &$form_state, $default_date = NULL, $js = TRUE) {
  ctools_include('jump-menu');

  $view = views_get_view('elife_archive_by_month');
  $view->execute_display('block_1');

  $select = [];
  $options = [
    'choose' => 'Select month',
  ];

  if (empty($view->result)) {
    return NULL;
  }

  foreach ($view->result as $result) {
    $date = strtotime($result->field_elife_a_fpubdate_value_summary . '-01');

    $path = '/' . _elife_archive_get_expected_path(date('Y', $date), date('m', $date));
    $text = date('F Y', $date);

    $select[$path] = t('!month (!records)', [
      '!month' => $text,
      '!records' => $result->num_records,
    ]);
  }

  $current_page = _elife_archive_get_month_year_from_args();

  if (NULL !== $current_page) {
    list($year, $month) = $current_page;

    if (!empty($month)) {
      $options['default_value'] = '/' . _elife_archive_get_expected_path($year, $month);
    }
  }

  return ctools_jump_menu($form, $form_state, $select, $options);
}

/**
 * Return the archive View.
 *
 * as a renderable array of months linked to the archive listing page for that
 * month. The view determines which month views are included, but only the
 * month name is included in the result.
 *
 * CSS classes are applied to the view appropriate for the coverpage.
 * The output is cached within this request.
 *
 * @param array $li_classes
 *   array of CSS class names to add to list items
 * @param array $a_classes
 *   array of CSS class names to add to the list item link
 *
 * @return array
 *   A list of months tagged as a list.
 */
function _elife_archive_short_options_get($li_classes = array(), $a_classes = array()) {
  $view = views_get_view('elife_archive_by_month');
  $view->execute_display('block_1');
  $months = array();

  if ($results = $view->result) {
    foreach (array_slice($results, 0, 2) as $res) {
      $month = strtotime($res->field_elife_a_fpubdate_value_summary . '-01');
      $months[] = array(
        'data' => l(date('M', $month), 'archive/' . date('Y/m', $month), array('attributes' => $a_classes)),
        'class' => $li_classes,
      );
    }

    $months = array_reverse($months);
  }

  return $months;
}

/**
 * Implements hook_url_outbound_alter().
 */
function elife_archive_url_outbound_alter(&$path, &$options, $original_path) {
  if (preg_match('|^archive/([0-9]*)-([0-9]*)?|', $path, $matches)) {
    // Views produces links such as 'archive/2013-09', this crudely converts it
    // to our preferred 'archive/2013/09'.
    $path = sprintf('archive/%s/%s', $matches[1], $matches[2]);
  }
}

/**
 * Get the year and month from the current page.
 *
 * @return array|NULL
 *    An array of two items, containing the year and month as integers, or NULL
 *    values. If the page is not an archive page, NULL is returned.
 */
function _elife_archive_get_month_year_from_args() {
  $menu_item = menu_get_item();
  $args = $menu_item['page_arguments'];

  if ('archive' !== $menu_item['path']) {
    return NULL;
  }

  $parts = [NULL, NULL];

  if (!empty($args[0])) {
    $parts[0] = (int) $args[0];

    if (!empty($args[1])) {
      $parts[1] = (int) $args[1];
    }
  }

  if ($parts[1] < 1 || $parts[1] > 12) {
    $parts[1] = NULL;
  }

  return $parts;
}

/**
 * Get the expected path for an archive page.
 *
 * @param int|null $year
 *    Year.
 * @param int|null $month
 *    Month.
 *
 * @return string
 *    Expected path.
 */
function _elife_archive_get_expected_path($year = NULL, $month = NULL) {
  $path = 'archive';

  if (!empty($year) && !empty($month)) {
    $path .= '/' . $year . '/' . str_pad($month, 2, '0', STR_PAD_LEFT);
  }

  return $path;
}

/**
 * Implements hook_block_info().
 *
 * Declare Blocks for the 'jump to month' form and for the short
 * archive listing on the homepage.
 */
function elife_archive_block_info() {
  $blocks['elife_archive_jumpto'] = array(
    'info' => t('eLife Archive: Jump to'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['elife_archive_short'] = array(
    'info' => t('eLife Archive: Short'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Provide Blocks for the 'jump to month' form and for the short
 * archive listing on the homepage. The latter is * not currently
 * used however because _elife_archive_short() is called directly
 * from the elife_coverpage nav plugin.
 */
function elife_archive_block_view($delta = '') {
  switch ($delta) {
    case 'elife_archive_jumpto':
      $content = drupal_get_form('elife_archive_goto_form');
      return array('subject' => NULL, 'content' => $content);

    case 'elife_archive_short':
      return array('subject' => NULL, 'content' => _elife_archive_short());

  }
}

/**
 * Create a renderable array containing a list of archive months.
 *
 * suitable for the coverpage, that is, prepended with 'UPCOMING' and
 * appended with an 'all' archives link.
 *
 * CSS classes are applied to the view appropriate for the coverpage.
 *
 * @return array
 *   renderable array of block
 */
function _elife_archive_short() {

  $upcoming_url = 'upcoming';
  $archive_url = 'archive';

  $ol_classes = array('class' => array('home-archive__list'));
  $li_classes = array('home-archive-listing__list_item');
  $a_classes = array('class' => array('home-archive-listing__link'));

  $links[] = array(
    'data' => l(t('Upcoming'), $upcoming_url, array('attributes' => $a_classes)),
    'class' => $li_classes,
  );

  $archive = _elife_archive_short_options_get($li_classes, $a_classes);
  $links = array_merge($links, $archive);
  $links[] = array(
    'data' => l(t('Archive'), $archive_url, array('attributes' => $a_classes)),
    'class' => $li_classes,
  );

  $render = array(
    'list' => array(
      '#theme' => 'item_list',
      '#type' => 'ol',
      '#items' => $links,
      '#attributes' => $ol_classes,
    ),
  );
  return $render;
}

/**
 * Implements hook_elife_xmlsitemap_custom_links().
 */
function elife_archive_elife_xmlsitemap_custom_links() {
  $links = [
    'archive',
  ];

  $view = views_get_view('elife_archive_by_month');
  if (empty($view)) {
    return [];
  }
  $view->execute_display('block_1');

  if (!empty($view->result)) {
    foreach ($view->result as $result) {
      $date = strtotime($result->field_elife_a_fpubdate_value_summary . '-01');
      $links[] = _elife_archive_get_expected_path(date('Y', $date), date('m', $date));
    }
  }

  return ['elife_archive' => $links];
}
