<?php
/**
 * @file
 * Install, uninstall and update the elife_article module.
 */

/**
 * Implements hook_requirements().
 */
function elife_article_requirements($phase) {
  $requirements = array();

  // Report the version of libraries.
  if ($phase == 'runtime') {
    drupal_load('module', 'libraries');
    $libraries = elife_article_libraries_info();
    foreach ($libraries as $name => $info) {
      $library = libraries_detect($name);
      $requirements[$name] = array(
        'title' => $library['name'],
        'severity' => $library['installed'] ? REQUIREMENT_OK : REQUIREMENT_WARNING,
        'value' => $library['installed'] ? l($library['version'], $library['vendor url']) : $library['error message'],
      );
    }
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function elife_article_schema() {
  $schema['elife_markup'] = array(
    'description' => 'Cache table for eLife markup service queries.',
    'fields' => array(
      // This is a md5 hash of the serialized output of
      // \Drupal\elife_article\ElifeMarkupServiceInterface::getQuery().
      'id' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'default' => '',
        'length' => 32,
        'description' => 'Hash of markup queries',
      ),
      // In most cases this will just be one value, but this could be adapted to
      // have multiple 'article_version_id' with a '::' delimiter.
      'article_version_id' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'default' => '',
        'length' => 128,
        'description' => 'Hash of markup queries',
      ),
      'markup' => array(
        'type' => 'text',
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'Serialized ElifeMarkupService object',
      ),
      'date' => array(
        'description' => 'The Unix timestamp of when the query was stored.',
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
  );
  $schema['elife_citation'] = array(
    'description' => 'Cache table for eLife citation format service queries.',
    'fields' => array(
      'id' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'default' => '',
        'length' => 128,
        'description' => 'Article version id',
      ),
      'citation' => array(
        'type' => 'text',
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'Serialized ElifeCitationService object',
      ),
      'date' => array(
        'description' => 'The Unix timestamp of when the query was stored.',
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
  );
  return $schema;
}

/**
 * Implements hook_install().
 */
function elife_article_install() {
  // @todo - elife - nlisgo - swap this for actual paths when in production.
  variable_set('elife_article_source_xml_base_path', 'https://s3.amazonaws.com/elife-cdn/elife-articles/');
  variable_set('elife_article_source_xml_file_pattern', '[node:manuscript_id]/elife[node:manuscript_id].xml');
}

/**
 * Implements hook_uninstall().
 */
function elife_article_uninstall() {
  variable_del('elife_article_category_plural');
  variable_del('elife_article_citation_service_factory');
  variable_del('elife_article_markup_service_factory');
  variable_del('elife_article_sections_available');
  variable_del('elife_article_source_xml_base_path');
  variable_del('elife_article_source_xml_file_pattern');
}
