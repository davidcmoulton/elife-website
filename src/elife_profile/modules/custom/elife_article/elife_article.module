<?php
/**
 * @file
 * Code for the eLife: Article feature.
 */

include_once 'elife_article.features.inc';

use Doctrine\Common\Annotations\AnnotationRegistry;
use Drupal\elife_article\ElifeArticleVersion;
use Drupal\elife_article\ElifeMarkupService;
use Drupal\elife_article\ExeterMarkupService;
use Drupal\elife_article\MockMarkupService;
use eLife\EIF\ArticleVersion;
use eLife\EIF\ArticleVersion\Affiliation;
use eLife\EIF\ArticleVersion\BaseContributor;
use eLife\EIF\ArticleVersion\Citation;
use eLife\EIF\ArticleVersion\Citation\Author;
use eLife\EIF\ArticleVersion\Contributor;
use eLife\EIF\ArticleVersion\Contributor\PersonContributor;
use eLife\EIF\ArticleVersion\Contributor\PersonContributor\BylineContributor;
use eLife\EIF\ArticleVersion\Contributor\CollabContributor;
use eLife\EIF\ArticleVersion\Contributor\OnBehalfOfContributor;
use eLife\EIF\ArticleVersion\Contributor\PersonContributor\NonBylineContributor;
use eLife\EIF\ArticleVersion\Fragment;
use eLife\EIF\ArticleVersion\Referenced;
use eLife\EIF\ArticleVersion\Referenced\FootNote;
use eLife\EIF\ArticleVersion\Referenced\Funding;
use eLife\EIF\ArticleVersion\Referenced\RelatedObject;
use eLife\EIF\ArticleVersion\RelatedArticle;
use eLife\EIF\ArticleVersion\SubArticle;
use eLife\EIF\JMSJsonSerializer;
use eLife\EIF\JMSJsonSerializer\ContributorHandler;
use eLife\EIF\JMSJsonSerializer\DefaultValueExclusionStrategy;
use eLife\EIF\JMSJsonSerializer\FragmentHandler;
use eLife\EIF\JMSJsonSerializer\SubArticleSubscriber;
use eLife\EIF\JsonSerializer;
use eLife\EIF\JsonValidator;
use eLife\EIF\NodeJsonValidator;
use JMS\Serializer\DeserializationContext;
use JMS\Serializer\EventDispatcher\EventDispatcher;
use JMS\Serializer\Handler\HandlerRegistry;
use JMS\Serializer\SerializationContext;

/**
 * Implements hook_preprocess_node().
 */
function elife_article_preprocess_node(&$variables) {
  $node = $variables['node'];

  $variables['submitted'] = t('Created !created-date and last modified on !changed-date', array(
    '!created-date' => format_date($node->created),
    '!changed-date' => format_date($node->changed),
  ));
}

/**
 * Implements hook_token_info().
 */
function elife_article_token_info() {
  $info['tokens']['term']['plural'] = array(
    'name' => t('Plural name'),
    'description' => t('Plural name, if available.'),
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function elife_article_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);

  if ($type == 'term' && !empty($data['term'])) {
    $term = $data['term'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'plural':
          $plural = ElifeArticleVersion::getCategoryPlural($term->name);
          $replacements[$original] = $sanitize ? check_plain($plural) : $plural;
          break;
      }
    }
  }

  return $replacements;
}

/**
 * @return JsonSerializer
 */
function elife_article_serializer() {
  $jmsSerializer = &drupal_static(__FUNCTION__);

  if (!isset($jmsSerializer)) {
    AnnotationRegistry::registerAutoloadNamespace(
      'JMS\Serializer\Annotation',
      variable_get('elife_composer_vendor_path') . '/jms/serializer/src'
    );

    $jmsSerializer = JMS\Serializer\SerializerBuilder::create()
      ->configureHandlers(function (HandlerRegistry $registry) {
        $registry->registerSubscribingHandler(new ContributorHandler());
        $registry->registerSubscribingHandler(new FragmentHandler());
      })
      ->configureListeners(function (EventDispatcher $dispatcher) {
        $dispatcher->addSubscriber(new SubArticleSubscriber());
      })
      ->setCacheDir(variable_get('elife_cache_dir', sys_get_temp_dir()) . '/jms_serializer')
      ->setDebug(!variable_get('elife_production', FALSE))
      ->build();
  }

  $serializationContext = SerializationContext::create()
    ->addExclusionStrategy(new DefaultValueExclusionStrategy());

  $deserializationContext = DeserializationContext::create();

  return new JMSJsonSerializer($jmsSerializer, $serializationContext, $deserializationContext);
}

/**
 * @return JsonValidator
 */
function elife_article_validator() {
  $validator = &drupal_static(__FUNCTION__);

  if (!isset($validator)) {
    $validator = new NodeJsonValidator(variable_get('elife_node_binary', 'node') . ' ' . DRUPAL_ROOT . '/' . libraries_get_path('elife-eif-schema') . '/validator.js');
  }

  return $validator;
}

/**
 * @return ElifeMarkupService
 */
function elife_article_markup_service() {
  /* @var string $factory */
  $factory = variable_get('elife_article_markup_service_factory', '_elife_article_exeter_markup_service');
  $markup_service = $factory();
  return $markup_service;
}

/**
 * @return ExeterMarkupService
 */
function _elife_article_exeter_markup_service() {
  $markup_service = new ExeterMarkupService();
  return $markup_service;
}

/**
 * @return MockMarkupService
 */
function _elife_article_mock_markup_service() {
  $markup_service = new MockMarkupService();
  return $markup_service;
}

function elife_article_version_to_dto(stdClass $entity) {
  /* @var EntityDrupalWrapper $entity */
  $entity = entity_metadata_wrapper('node', $entity);
  $entity_article = ElifeArticleVersion::getArticle($entity->field_elife_a_article_id->value(), TRUE);
  /* @var EntityDrupalWrapper $entity_article */
  $entity_article = entity_metadata_wrapper('node', $entity_article);

  $categories = [];
  foreach ($entity->field_elife_a_category->value() as $entity_category) {
    /* @var EntityDrupalWrapper $entity_category */
    $entity_category = entity_metadata_wrapper('taxonomy_term', $entity_category);
    $categories[$entity_category->field_elife_category_type->value()][] = $entity_category->label();
  }

  foreach ($entity->field_elife_a_heading->value() as $entity_heading) {
    /* @var EntityDrupalWrapper $entity_heading */
    $entity_heading = entity_metadata_wrapper('taxonomy_term', $entity_heading);
    $categories['heading'][] = $entity_heading->label();
  }

  $keywords = [];
  foreach ($entity->field_elife_a_keyword->value() as $entity_keyword) {
    /* @var EntityDrupalWrapper $entity_keyword */
    $entity_keyword = entity_metadata_wrapper('taxonomy_term', $entity_keyword);
    $keywords[$entity_keyword->field_elife_a_kwd_type->value()][] = $entity_keyword->field_elife_a_full_title->value();
  }

  $related_articles = [];
  foreach ($entity_article->field_elife_a_related_articles as $fc_wrapper) {
    $related_articles[] = new RelatedArticle($fc_wrapper->field_elife_a_rel_article_type->value(), $fc_wrapper->field_elife_a_doi->value());
  }

  $referenced = [
    'equal-contrib' => [],
    'email' => [],
    'funding' => [],
    'competing-interest' => [],
    'contribution' => [],
    'present-address' => [],
    'affiliation' => [],
    'related-object' => [],
    'foot-note' => [],
  ];

  foreach ($entity->field_elife_a_basic_ref->value() as $entity_basic_ref) {
    /* @var EntityDrupalWrapper $entity_basic_ref */
    $entity_basic_ref = entity_metadata_wrapper('field_collection_item', $entity_basic_ref);

    $referenced[$entity_basic_ref->field_elife_a_basic_ref_type->value()][$entity_basic_ref->field_elife_a_ref_key->value()] = $entity_basic_ref->field_elife_a_basic_ref_value->value();
  }

  foreach ($entity->field_elife_a_fund_ref->value() as $entity_fund_ref) {
    /* @var EntityDrupalWrapper $entity_fund_ref */
    $entity_fund_ref = entity_metadata_wrapper('field_collection_item', $entity_fund_ref);

    $referenced['funding'][$entity_fund_ref->field_elife_a_ref_key->value()] = new Funding(
      $entity_fund_ref->field_elife_a_fund_ref_id->value(),
      $entity_fund_ref->field_elife_a_fund_ref_id_type->value(),
      $entity_fund_ref->field_elife_a_fund_ref_inst->value(),
      'university',
      $entity_fund_ref->field_elife_a_fund_ref_award_id->value()
    );
  }

  foreach ($entity->field_elife_a_aff_ref->value() as $entity_aff_ref) {
    /* @var EntityDrupalWrapper $entity_aff_ref */
    $entity_aff_ref = entity_metadata_wrapper('field_collection_item', $entity_aff_ref);

    $referenced['affiliation'][$entity_aff_ref->field_elife_a_ref_key->value()] = new Affiliation(
      $entity_aff_ref->field_elife_a_aff_ref_dept->value(),
      $entity_aff_ref->field_elife_a_aff_ref_inst->value(),
      $entity_aff_ref->field_elife_a_aff_ref_city->value(),
      $entity_aff_ref->field_elife_a_aff_ref_country->value()
    );
  }

  foreach ($entity->field_elife_a_rel_ref->value() as $entity_rel_ref) {
    /* @var EntityDrupalWrapper $entity_rel_ref */
    $entity_rel_ref = entity_metadata_wrapper('field_collection_item', $entity_rel_ref);

    $referenced['related-object'][$entity_rel_ref->field_elife_a_ref_key->value()] = new RelatedObject();
  }

  foreach ($entity->field_elife_a_fn_ref->value() as $entity_fn_ref) {
    /* @var EntityDrupalWrapper $entity_fn_ref */
    $entity_fn_ref = entity_metadata_wrapper('field_collection_item', $entity_fn_ref);

    $referenced['foot-note'][$entity_fn_ref->field_elife_a_ref_key->value()] = new FootNote(
      $entity_fn_ref->field_elife_a_fn_ref_type->value(),
      $entity_fn_ref->field_elife_a_fn_ref_value->value()
    );
  }

  $referenced = new Referenced(
    $referenced['equal-contrib'],
    $referenced['email'],
    $referenced['funding'],
    $referenced['competing-interest'],
    $referenced['contribution'],
    $referenced['present-address'],
    $referenced['affiliation'],
    $referenced['related-object'],
    $referenced['foot-note']
  );

  $contributors = [];
  if ($contributors_json = $entity->field_elife_a_contributors_json->value()) {
    $contributors = elife_article_serializer()->deserialize('{"contributors":' . $contributors_json . '}');
    $contributors = $contributors->getContributors();
  }

  $get_fragments = function ($entity) use (&$get_fragments) {
    $fragments = [];
    /* @var EntityDrupalWrapper $entity_fragment */
    foreach ($entity->field_elife_a_fragments as $entity_fragment) {
      if ('elife_article_ver' === $entity_fragment->getBundle()) {
        $contributors = [];
        foreach ($entity_fragment->field_elife_a_contributors_pri->value() as $entity_contributor) {
          /* @var EntityDrupalWrapper $entity_contributor */
          $entity_contributor = entity_metadata_wrapper('node', $entity_contributor);

          $references = [];

          $references_map = [
            'equal-contrib' => 'field_elife_a_basic_ref_links',
            'email' => 'field_elife_a_basic_ref_links',
            'funding' => 'field_elife_a_fund_ref_links',
            'competing-interest' => 'field_elife_a_basic_ref_links',
            'contribution' => 'field_elife_a_basic_ref_links',
            'present-address' => 'field_elife_a_basic_ref_links',
            'affiliation' => 'field_elife_a_aff_ref_links',
            'related-object' => 'field_elife_a_rel_ref_links',
            'foot-note' => 'field_elife_a_fn_ref_links',
          ];

          foreach ($references_map as $type => $field) {
            foreach ($entity_contributor->$field->value() as $entity_contributor_reference) {
              /* @var EntityDrupalWrapper $entity_contributor_reference */
              $entity_contributor_reference = entity_metadata_wrapper('field_collection_item', $entity_contributor_reference);
              if ('field_elife_a_basic_ref_links' === $field) {
                if ($type !== $entity_contributor_reference->field_elife_a_basic_ref_type->value()) {
                  continue;
                }
              }
              $references[$type][] = $entity_contributor_reference->field_elife_a_ref_key->value();
            }
          }

          if ($entity_contributor->field_elife_a_collab->value()) {
            $contributors[] = new CollabContributor(
              $entity_contributor->field_elife_a_contrib_type->value(),
              $entity_contributor->field_elife_a_corresp->value(),
              $entity_contributor->field_elife_a_author_id->value(),
              $entity_contributor->field_elife_a_group_author_key->value(),
              $references,
              $entity_contributor->field_elife_a_collab->value()
            );
          }
          else {
            $affiliations = [];
            if (
              $entity_contributor->field_elife_a_aff_dept->value() ||
              $entity_contributor->field_elife_a_aff_inst->value() ||
              $entity_contributor->field_elife_a_aff_city->value() ||
              $entity_contributor->field_elife_a_aff_country->value()
            ) {
              $affiliations[] = new Affiliation(
                $entity_contributor->field_elife_a_aff_dept->value(),
                $entity_contributor->field_elife_a_aff_inst->value(),
                $entity_contributor->field_elife_a_aff_city->value(),
                $entity_contributor->field_elife_a_aff_country->value()
              );
            }

            $contributors[] = new BylineContributor(
              $entity_contributor->field_elife_a_contrib_type->value(),
              $entity_contributor->field_elife_a_corresp->value(),
              $entity_contributor->field_elife_a_author_id->value(),
              $entity_contributor->field_elife_a_group_author_key->value(),
              $references,
              $entity_contributor->field_elife_a_equal_contrib->value(),
              $entity_contributor->field_elife_a_deceased->value(),
              $entity_contributor->field_elife_a_surname->value(),
              $entity_contributor->field_elife_a_fnames->value(),
              $entity_contributor->field_elife_a_author_suffix->value(),
              $entity_contributor->field_elife_a_orcid_id->value(),
              $entity_contributor->field_elife_a_author_role->value(),
              $affiliations
            );
          }
        }

        $fragments[] = new SubArticle(
          $entity_fragment->field_elife_a_full_title->value()['value'],
          $entity_fragment->field_elife_a_doi->value(),
          drupal_get_path_alias('node/' . $entity_fragment->getIdentifier()),
          $get_fragments($entity_fragment),
          $contributors
        );
      }
      else {
        $fragments[] = new Fragment(
          $entity_fragment->field_elife_a_frag_type->value(),
          $entity_fragment->field_elife_a_full_title->value()['value'],
          $entity_fragment->field_elife_a_doi->value(),
          drupal_get_path_alias('node/' . $entity_fragment->getIdentifier()),
          $get_fragments($entity_fragment)
        );
      }
    }
    return $fragments;
  };

  $fragments = $get_fragments($entity);

  $citations = [];
  if ($citations_json = $entity->field_elife_a_citations_json->value()) {
    $citations = elife_article_serializer()->deserialize('{"citations":' . $citations_json . '}');
    $citations = $citations->getCitations();
  }

  if ($entity->field_elife_a_author_imp->value()) {
    $impact_statement = $entity->field_elife_a_author_imp->value()['value'];
  }
  else {
    $impact_statement = NULL;
  }

  if ($entity_article->field_elife_a_fpubdate->value()) {
    $pub_date = DateTimeImmutable::createFromFormat('U', $entity_article->field_elife_a_fpubdate->value());
  }
  else {
    $pub_date = NULL;
  }

  if ($entity->field_elife_a_update->value()) {
    $update = DateTimeImmutable::createFromFormat('U', $entity->field_elife_a_update->value());
  }
  else {
    $update = NULL;
  }

  $article_version = new ArticleVersion(
    $entity->field_elife_a_full_title->value()['value'],
    $impact_statement,
    $entity->field_elife_a_version->value(),
    $entity->field_elife_a_doi->value(),
    $entity->status->value(),
    $entity_article->field_elife_a_volume->value(),
    $entity->field_elife_a_elocation_id->value(),
    $entity->field_elife_a_article_id->value(),
    $entity->field_elife_a_article_version_id->value(),
    $pub_date,
    $update,
    drupal_get_path_alias('node/' . $entity->getIdentifier()),
    $entity->field_elife_a_article_type->value(),
    $entity->field_elife_a_status->value(),
    $categories,
    $keywords,
    $related_articles,
    $contributors,
    $referenced,
    $fragments,
    $citations
  );

  return $article_version;
}

function elife_article_from_dto(ArticleVersion $article_version, $uid) {
  $entity = ElifeArticleVersion::getArticle($article_version->getArticleId());

  // Only update title and related articles if this version is latest.
  $versions = ElifeArticleVersion::fromId($article_version->getArticleId(), FALSE);
  $latest_status = '';
  $latest_version = 0;
  if (!empty($versions)) {
    $latest = reset($versions);
    $latest_status = $latest->extraFields->field_elife_a_status_status;
    $latest_version = $latest->extraFields->field_elife_a_version_version;
  }

  // @todo - elife - nlisgo - we may wish to only overwrite these values only when a version is the latest and published.
  // We would need to store all of these values against the version in that
  // refactor.

  $pub_date = $article_version->getPubDate();

  // It this is the latest version of an article then delete the entity so we
  // can cleanly load in the latest values.
  if ($entity && (
      $latest_version === 0
      // Check to see if incoming status is VOR and we only have POA stored.
      || strcasecmp($article_version->getStatus(), $latest_status) > 0
      || $article_version->getVersion() >= $latest_version)
  ) {
    // Preserve pub-date in case it is not supplied with more recent version.
    if (!$pub_date) {
      /* @var EntityDrupalWrapper $ewrapper */
      $ewrapper = entity_metadata_wrapper('node', $entity);

      if ($ewrapper->field_elife_a_fpubdate->value()) {
        $pub_date = DateTimeImmutable::createFromFormat('U', $ewrapper->field_elife_a_fpubdate->value());
      }
      else {
        $pub_date = NULL;
      }
      unset($ewrapper);
    }
    entity_delete('node', $entity->nid);
    $entity = NULL;
  }

  if (!$entity) {
    $entity = entity_create('node', [
      'type' => 'elife_article',
      'uid' => $uid,
    ]);
    $new = TRUE;
  }
  else {
    $new = FALSE;
  }

  /* @var EntityDrupalWrapper $entity */
  $entity = entity_metadata_wrapper('node', $entity);

  // Amending the versions of an article can happen each time a new version is
  // processed.
  $versions = [];
  $query = new EntityFieldQueryExtraFields();
  $query->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'elife_article_ver');
  $query->fieldCondition('field_elife_a_article_id', 'value', $article_version->getArticleId());
  $query->addExtraField('field_elife_a_version', 'value', 'version');
  $query->propertyOrderBy('status', 'DESC');
  $query->fieldOrderBy('field_elife_a_version', 'value', 'DESC');

  if ($result = $query->execute()) {
    if (isset($result['node']) && !empty($result['node'])) {
      foreach ($result['node'] as $nid => $version) {
        if (!empty($version->extraFields->field_elife_a_version_version)) {
          $versions[$version->extraFields->field_elife_a_version_version] = $nid;
        }
      }
    }
  }

  $entity->field_elife_a_versions->set(array_values($versions));

  if ($new) {
    $entity->title->set($article_version->getTitle());
    $entity->field_elife_a_volume->set($article_version->getVolume());
    $entity->field_elife_a_article_id->set($article_version->getArticleId());
    if ($pub_date instanceof DateTimeImmutable) {
      $entity->field_elife_a_fpubdate->set($pub_date
        ->getTimestamp());
    }
    elseif ($article_version->getPublish() && !$entity->field_elife_a_fpubdate->value()) {
      // @todo - elife - nlisgo - I would prefer to do this as a rule.
      $entity->field_elife_a_fpubdate->set(time());
    }
    elseif (!$entity->field_elife_a_fpubdate->value()) {
      $entity->field_elife_a_fpubdate->set(NULL);
    }

    $entity->save();
    foreach ($article_version->getRelatedArticles() as $related_article) {
      /* @var FieldCollectionItemEntity $fc_item */
      $fc_item = entity_create('field_collection_item', array('field_name' => 'field_elife_a_related_articles'));
      $fc_item->setHostEntity('node', $entity->raw());

      /* @var EntityDrupalWrapper $fc_wrapper */
      $fc_wrapper = entity_metadata_wrapper('field_collection_item', $fc_item);

      $fc_wrapper->field_elife_a_rel_article_type->set($related_article->getType());
      $fc_wrapper->field_elife_a_doi->set($related_article->getHref());

      $fc_wrapper->save();
    }

  }

  $entity->save();

  // Processing unverified related articles should happen each time a version is
  // added.
  ElifeArticleVersion::processUnverifiedRelatedArticles();

  return $entity->raw();
}

function elife_article_version_from_dto(ArticleVersion $article_version, $uid) {
  $entity = entity_create('node', [
    'type' => 'elife_article_ver',
    'uid' => $uid,
  ]);

  /* @var EntityDrupalWrapper $entity */
  $entity = entity_metadata_wrapper('node', $entity);

  $entity->title->set($article_version->getTitle());
  $entity->field_elife_a_full_title->set([
    'value' => $article_version->getTitle(),
    'format' => 'full_html',
  ]);
  if ($article_version->getImpactStatement()) {
    $entity->field_elife_a_author_imp->set([
      'value' => $article_version->getImpactStatement(),
      'format' => 'full_html',
    ]);
  }
  $entity->field_elife_a_version->set($article_version->getVersion());
  $entity->field_elife_a_doi->set($article_version->getDoi());
  $entity->status->set((int) $article_version->getPublish());
  $entity->field_elife_a_article_id->set($article_version->getArticleId());
  $entity->field_elife_a_elocation_id->set($article_version->getElocationId());
  $entity->field_elife_a_article_version_id->set($article_version->getArticleVersionId());
  if ($article_version->getUpdate()) {
    $entity->field_elife_a_update->set($article_version->getUpdate()
      ->getTimestamp());
  }
  else {
    $entity->field_elife_a_update->set(NULL);
  }
  $entity->field_elife_a_article_type->set($article_version->getArticleType());
  $entity->field_elife_a_status->set($article_version->getStatus());

  $entity_categories = [];
  $entity_headings = [];
  foreach ($article_version->getCategories() as $group => $categories) {
    if ('heading' === $group) {
      foreach ($categories as $category) {
        if ($term = _elife_services_article_prepare_term('elife_headings', $category)) {
          $entity_headings[] = $term->tid;
        }
      }
    }
    else {
      foreach ($categories as $category) {
        $category_fields = [
          'field_elife_category_type' => $group,
        ];
        if ($term = _elife_services_article_prepare_term('elife_categories', $category, [], $category_fields)) {
          $entity_categories[] = $term->tid;
        }
      }
    }
  }
  $entity->field_elife_a_category->set($entity_categories);
  $entity->field_elife_a_heading->set($entity_headings);

  $entity_keywords = [];
  foreach ($article_version->getKeywords() as $group => $keywords) {
    foreach ($keywords as $keyword) {
      $keyword_fields = [
        'field_elife_a_full_title' => [
          'value' => $keyword,
          'format' => 'full_html',
        ],
        'field_elife_a_kwd_type' => $group,
      ];
      if ($term = _elife_services_article_prepare_term('elife_keywords', $keyword, [], $keyword_fields)) {
        $entity_keywords[] = $term->tid;
      }
    }
  }
  $entity->field_elife_a_keyword->set($entity_keywords);

  $entity->save();

  // Add or amend the content alias.
  $source = 'node/' . $entity->nid->value();
  // Check to see that path is unique.
  if (!$path = path_load(array('alias' => $article_version->getPath()))) {
    _elife_article_create_path($article_version->getPath(), $source);
  }

  $referenced = $article_version->getReferenced();
  $entity_references = [
    'equal-contrib' => [],
    'email' => [],
    'funding' => [],
    'competing-interest' => [],
    'contribution' => [],
    'present-address' => [],
    'affiliation' => [],
    'related-object' => [],
    'foot-note' => [],
  ];
  foreach (
    [
      'equal-contrib' => $referenced->getEqualContrib(),
      'email' => $referenced->getEmail(),
      'competing-interest' => $referenced->getCompetingInterest(),
      'contribution' => $referenced->getContribution(),
      'present-address' => $referenced->getPresentAddress(),
    ]
    as $type => $data) {
    foreach ($data as $key => $value) {
      /* @var FieldCollectionItemEntity $fc_item */
      $fc_item = entity_create('field_collection_item', array('field_name' => 'field_elife_a_basic_ref'));
      $fc_item->setHostEntity('node', $entity->raw());

      /* @var EntityDrupalWrapper $fc_wrapper */
      $fc_wrapper = entity_metadata_wrapper('field_collection_item', $fc_item);

      $fc_wrapper->field_elife_a_basic_ref_type->set($type);
      $fc_wrapper->field_elife_a_ref_key->set($key);
      $fc_wrapper->field_elife_a_basic_ref_value->set($value);

      $fc_wrapper->save();

      $entity_references[$type][$key] = $fc_wrapper->getIdentifier();
    }
  }

  foreach ($referenced->getFunding() as $key => $funding) {
    /* @var FieldCollectionItemEntity $fc_item */
    $fc_item = entity_create('field_collection_item', array('field_name' => 'field_elife_a_fund_ref'));
    $fc_item->setHostEntity('node', $entity->raw());

    /* @var EntityDrupalWrapper $fc_wrapper */
    $fc_wrapper = entity_metadata_wrapper('field_collection_item', $fc_item);

    $fc_wrapper->field_elife_a_ref_key->set($key);
    $fc_wrapper->field_elife_a_fund_ref_id->set($funding->getId());
    $fc_wrapper->field_elife_a_fund_ref_id_type->set($funding->getIdType());
    $fc_wrapper->field_elife_a_fund_ref_inst->set($funding->getInstitution());
    // TODO no institution type field?
    $fc_wrapper->field_elife_a_fund_ref_award_id->set($funding->getAwardId());

    $fc_wrapper->save();

    $entity_references['funding'][$key] = $fc_wrapper->getIdentifier();
  }

  foreach ($referenced->getAffiliation() as $key => $affiliation) {
    /* @var FieldCollectionItemEntity $fc_item */
    $fc_item = entity_create('field_collection_item', array('field_name' => 'field_elife_a_aff_ref'));
    $fc_item->setHostEntity('node', $entity->raw());

    /* @var EntityDrupalWrapper $fc_wrapper */
    $fc_wrapper = entity_metadata_wrapper('field_collection_item', $fc_item);

    $fc_wrapper->field_elife_a_ref_key->set($key);
    // TODO no label data?
    $fc_wrapper->field_elife_a_aff_ref_dept->set($affiliation->getDept());
    $fc_wrapper->field_elife_a_aff_ref_inst->set($affiliation->getInstitution());
    $fc_wrapper->field_elife_a_aff_ref_city->set($affiliation->getCity());
    $fc_wrapper->field_elife_a_aff_ref_country->set($affiliation->getCountry());

    $fc_wrapper->save();

    $entity_references['affiliation'][$key] = $fc_wrapper->getIdentifier();
  }

  foreach ($referenced->getRelatedObject() as $key => $object) {
    /* @var FieldCollectionItemEntity $fc_item */
    $fc_item = entity_create('field_collection_item', array('field_name' => 'field_elife_a_rel_ref'));
    $fc_item->setHostEntity('node', $entity->raw());

    /* @var EntityDrupalWrapper $fc_wrapper */
    $fc_wrapper = entity_metadata_wrapper('field_collection_item', $fc_item);

    $fc_wrapper->field_elife_a_ref_key->set($key);

    $fc_wrapper->save();

    $entity_references['related-object'][$key] = $fc_wrapper->getIdentifier();
  }

  foreach ($referenced->getFootNote() as $key => $foot_note) {
    /* @var FieldCollectionItemEntity $fc_item */
    $fc_item = entity_create('field_collection_item', array('field_name' => 'field_elife_a_fn_ref'));
    $fc_item->setHostEntity('node', $entity->raw());

    /* @var EntityDrupalWrapper $fc_wrapper */
    $fc_wrapper = entity_metadata_wrapper('field_collection_item', $fc_item);

    $fc_wrapper->field_elife_a_ref_key->set($key);
    $fc_wrapper->field_elife_a_fn_ref_type->set($foot_note->getType());
    $fc_wrapper->field_elife_a_fn_ref_value->set($foot_note->getValue());

    $fc_wrapper->save();

    $entity_references['foot-note'][$key] = $fc_wrapper->getIdentifier();
  }

  $entity_contributors = [];
  foreach ($article_version->getContributors() as $contributor) {
    if (!($contributor instanceof NonBylineContributor)) {
      $values = [
        'type' => 'elife_contributor',
        'uid' => $uid,
      ];

      $entity_contributor = entity_create('node', $values);

      /* @var EntityDrupalWrapper $entity_contributor */
      $entity_contributor = entity_metadata_wrapper('node', $entity_contributor);

      $entity_contributor->field_elife_a_parent->set($entity->getIdentifier());
      $entity_contributor->field_elife_a_contrib_type->set($contributor->getType());

      if ($contributor instanceof Contributor) {
        $entity_contributor->field_elife_a_corresp->set($contributor->isCorresp());
        $entity_contributor->field_elife_a_author_id->set($contributor->getId());
        $entity_contributor->field_elife_a_group_author_key->set($contributor->getGroupAuthorKey());

        $references_map = [
          'equal-contrib' => 'field_elife_a_basic_ref_links',
          'email' => 'field_elife_a_basic_ref_links',
          'funding' => 'field_elife_a_fund_ref_links',
          'competing-interest' => 'field_elife_a_basic_ref_links',
          'contribution' => 'field_elife_a_basic_ref_links',
          'present-address' => 'field_elife_a_basic_ref_links',
          'affiliation' => 'field_elife_a_aff_ref_links',
          'related-object' => 'field_elife_a_rel_ref_links',
          'foot-note' => 'field_elife_a_fn_ref_links',
        ];

        foreach ($contributor->getReferences() as $type => $keys) {
          foreach ($keys as $key) {
            if (isset($entity_references[$type][$key])) {
              $entity_contributor->{$references_map[$type]}[] = $entity_references[$type][$key];
            }
          }
        }

        if ($contributor instanceof BylineContributor) {
          $entity_contributor->field_elife_a_equal_contrib->set($contributor->isEqualContrib());
          $entity_contributor->field_elife_a_deceased->set($contributor->isDeceased());
          $entity_contributor->field_elife_a_surname->set($contributor->getSurname());
          $entity_contributor->field_elife_a_fnames->set($contributor->getGivenNames());
          $entity_contributor->field_elife_a_author_suffix->set($contributor->getSuffix());
          $entity_contributor->field_elife_a_orcid_id->set($contributor->getOrcId());
          $entity_contributor->field_elife_a_author_role->set($contributor->getRole());
          // TODO only one affiliation stored?
          if (count($contributor->getAffiliations())) {
            $entity_contributor->field_elife_a_aff_dept->set($contributor->getAffiliations()[0]->getDept());
            $entity_contributor->field_elife_a_aff_inst->set($contributor->getAffiliations()[0]->getInstitution());
            $entity_contributor->field_elife_a_aff_city->set($contributor->getAffiliations()[0]->getCity());
            $entity_contributor->field_elife_a_aff_country->set($contributor->getAffiliations()[0]->getCountry());
          }
        }
        elseif ($contributor instanceof CollabContributor) {
          $entity_contributor->field_elife_a_collab->set($contributor->getCollab());
        }
      }
      elseif ($contributor instanceof OnBehalfOfContributor) {
        $entity_contributor->field_elife_a_on_behalf_of->set($contributor->getOnBehalfOf());
      }

      $entity_contributor->title->set(_elife_article_contributor_title($contributor));

      $entity_contributor->save();

      $entity_contributors[] = $entity_contributor->getIdentifier();
    }
  }

  $entity->field_elife_a_contributors_pri->set($entity_contributors);

  $handle_fragments = function ($parent_id, array $fragments, $sub_article = FALSE) use ($uid, &$handle_fragments) {
    $entity_fragments = [];

    foreach ($fragments as $fragment) {
      if ($fragment instanceof SubArticle) {
        $entity_fragment = entity_create('node', [
          'type' => 'elife_article_ver',
          'uid' => $uid,
        ]);

        /* @var EntityDrupalWrapper $entity_fragment */
        $entity_fragment = entity_metadata_wrapper('node', $entity_fragment);

        $entity_fragment->field_elife_a_subarticle->set(TRUE);

        $entity_fragment->field_elife_a_parent->set($parent_id);
        $entity_fragment->save();
        $sub_article = $entity_fragment->getIdentifier();

        $entity_contributors = [];

        foreach ($fragment->getContributors() as $contributor) {
          if ($contributor instanceof Contributor) {
            $values = [
              'type' => 'elife_contributor',
              'uid' => $uid,
            ];

            $entity_contributor = entity_create('node', $values);

            /* @var EntityDrupalWrapper $entity_contributor */
            $entity_contributor = entity_metadata_wrapper('node', $entity_contributor);

            $entity_contributor->field_elife_a_parent->set($parent_id);
            $entity_contributor->field_elife_a_contrib_type->set($contributor->getType());
            $entity_contributor->field_elife_a_corresp->set($contributor->isCorresp());
            $entity_contributor->field_elife_a_author_id->set($contributor->getId());
            $entity_contributor->field_elife_a_group_author_key->set($contributor->getGroupAuthorKey());

            $references_map = [
              'equal-contrib' => 'field_elife_a_basic_ref_links',
              'email' => 'field_elife_a_basic_ref_links',
              'funding' => 'field_elife_a_fund_ref_links',
              'competing-interest' => 'field_elife_a_basic_ref_links',
              'contribution' => 'field_elife_a_basic_ref_links',
              'present-address' => 'field_elife_a_basic_ref_links',
              'affiliation' => 'field_elife_a_aff_ref_links',
              'related-object' => 'field_elife_a_rel_ref_links',
              'foot-note' => 'field_elife_a_fn_ref_links',
            ];

            foreach ($contributor->getReferences() as $type => $keys) {
              foreach ($keys as $key) {
                if (isset($entity_references[$type][$key])) {
                  $entity_contributor->{$references_map[$type]}[] = $entity_references[$type][$key];
                }
              }
            }

            if ($contributor instanceof BylineContributor) {
              $entity_contributor->field_elife_a_equal_contrib->set($contributor->isEqualContrib());
              $entity_contributor->field_elife_a_deceased->set($contributor->isDeceased());
              $entity_contributor->field_elife_a_surname->set($contributor->getSurname());
              $entity_contributor->field_elife_a_fnames->set($contributor->getGivenNames());
              $entity_contributor->field_elife_a_author_suffix->set($contributor->getSuffix());
              $entity_contributor->field_elife_a_orcid_id->set($contributor->getOrcId());
              $entity_contributor->field_elife_a_author_role->set($contributor->getRole());
              // TODO only one affiliation stored?
              if (count($contributor->getAffiliations())) {
                $entity_contributor->field_elife_a_aff_dept->set($contributor->getAffiliations()[0]->getDept());
                $entity_contributor->field_elife_a_aff_inst->set($contributor->getAffiliations()[0]->getInstitution());
                $entity_contributor->field_elife_a_aff_city->set($contributor->getAffiliations()[0]->getCity());
                $entity_contributor->field_elife_a_aff_country->set($contributor->getAffiliations()[0]->getCountry());
              }
            }
            elseif ($contributor instanceof CollabContributor) {
              $entity_contributor->field_elife_a_collab->set($contributor->getCollab());
            }

            $entity_contributor->title->set(_elife_article_contributor_title($contributor));

            $entity_contributor->save();

            $entity_contributors[] = $entity_contributor->getIdentifier();
          }
        }

        $entity_fragment->field_elife_a_contributors_pri->set($entity_contributors);
      }
      else {
        /* @var Fragment $fragment */
        $values = [
          'type' => 'elife_fragment',
          'uid' => $uid,
        ];

        $entity_fragment = entity_create('node', $values);

        /* @var EntityDrupalWrapper $entity_fragment */
        $entity_fragment = entity_metadata_wrapper('node', $entity_fragment);

        $entity_fragment->field_elife_a_frag_type->set($fragment->getType());
        $entity_fragment->field_elife_a_subarticle->set(!empty($sub_article));
        if (!empty($sub_article)) {
          $entity_fragment->field_elife_a_parent_sub->set($sub_article);
        }

        $entity_fragment->field_elife_a_parent->set($parent_id);
        $entity_fragment->save();
      }

      $entity_fragment->title->set($fragment->getTitle());
      $entity_fragment->field_elife_a_full_title->set([
        'value' => $fragment->getTitle(),
        'format' => 'full_html',
      ]);

      $entity_fragment->field_elife_a_doi->set($fragment->getDoi());

      $entity_fragment->field_elife_a_full_title->set([
        'value' => $fragment->getTitle(),
        'format' => 'full_html'
      ]);
      $entity_fragment->field_elife_a_doi->set($fragment->getDoi());

      // Add or amend the content alias.
      $source = 'node/' . $entity_fragment->nid->value();
      // Check to see that path is unique.
      if (!$path = path_load(array('alias' => $fragment->getPath()))) {
        _elife_article_create_path($fragment->getPath(), $source);
      }

      $entity_fragment->field_elife_a_fragments->set($handle_fragments($parent_id, $fragment->getFragments(), $sub_article));

      $entity_fragment->save();

      $entity_fragments[] = $entity_fragment->getIdentifier();
    }

    return $entity_fragments;
  };

  $entity->field_elife_a_fragments->set($handle_fragments($entity->getIdentifier(), $article_version->getFragments()));

  $entity->save();

  return $entity->raw();
}

/**
 * Prepare node title for Contributors.
 *
 * @param BaseContributor $contributor
 *   Contributor.
 *
 * @return string
 *   Title.
 */
function _elife_article_contributor_title(BaseContributor $contributor) {
  $title = [];
  $title_extend = [];
  if ($contributor instanceof PersonContributor) {
    if ($id = $contributor->getId()) {
      $title[] = $id;
    }
    elseif ($group_id = $contributor->getGroupAuthorKey()) {
      $title[] = $group_id;
    }
    if ($given_names = $contributor->getGivenNames()) {
      $title_extend[] = $given_names;
    }
    if ($surname = $contributor->getSurname()) {
      $title_extend[] = $surname;
    }
    if ($suffix = $contributor->getSuffix()) {
      $title_extend[] = $suffix;
    }
  }
  elseif ($contributor instanceof CollabContributor) {
    if ($group_id = $contributor->getGroupAuthorKey()) {
      $title[] = $group_id;
    }
    $title_extend[] = $contributor->getCollab();
  }
  elseif ($contributor instanceof OnBehalfOfContributor) {
    $title_extend[] = $contributor->getOnBehalfOf();
  }

  $set_title = [];
  if (!empty($title)) {
    $set_title[] = implode(' ', $title);
  }

  if (!empty($title_extend)) {
    $title_extend = implode(' ', $title_extend);
    if (!empty($set_title)) {
      $title_extend = '(' . $title_extend . ')';
    }
    $set_title[] = $title_extend;
  }

  return implode(' ', $set_title);
}

/**
 * Create a path alias.
 *
 * @param string $path
 *   Path alias.
 * @param string $source
 *   Source value (e.g. node/1234).
 */
function _elife_article_create_path($path, $source) {
  $content_path = array(
    'alias' => $path,
    'source' => $source,
  );

  $existing = path_load(array('source' => $source));

  if ($existing) {
    $content_path += $existing;
  }

  path_save($content_path);
}

/**
 * Implements hook_libraries_info().
 */
function elife_article_libraries_info() {
  $libraries['BetterDOMDocument'] = array(
    'name' => 'BetterDOMDocument',
    'version' => '1',
    'vendor url' => 'https://github.com/highwire/opensource-php-BetterDOMDocument',
    'download url' => 'https://raw.githubusercontent.com/highwire/opensource-php-BetterDOMDocument/master/BetterDOMDocument.php',
    'files' => array(
      'php' => array('BetterDOMDocument.php'),
    ),
  );

  return $libraries;
}

/**
 * Convert string which may contain xml to html.
 *
 * @param string $string
 *   String to convert.
 *
 * @return string
 *   String with xml converted to html.
 */
function _elife_article_xmltohtml($string) {
  if (($library = libraries_load('BetterDOMDocument')) && !empty($library['loaded'])) {
    $string = '<xmltohtml>' . $string . '</xmltohtml>';
    $dom = new BetterDOMDocument($string);
    $html = preg_replace('#^<span class="xmltohtml">(.*?)</span>$#is', '$1', $dom->asHTML());
    return $html;
  }
  else {
    return $string;
  }
}

/**
 * Prepare display channel links.
 *
 * @param ArticleVersion $article_version
 *   Article Object.
 *
 * @return array
 *   Array of display channel links
 */
function _elife_article_display_channel_links(ArticleVersion $article_version) {
  $items = [];
  if (!empty($article_version->getDisplayChannels())) {
    $query = new EntityFieldQueryExtraFields();
    $query->entityCondition('entity_type', 'taxonomy_term');
    $query->entityCondition('bundle', 'elife_categories');
    $query->fieldCondition('field_elife_category_type', 'value', 'display-channel');
    $query->propertyCondition('name', $article_version->getDisplayChannels(), 'IN');
    $query->addExtraField('', 'name', 'name', 'taxonomy_term_data');
    if ($result = $query->execute()) {
      if (isset($result['taxonomy_term']) && !empty($result['taxonomy_term'])) {
        foreach ($result['taxonomy_term'] as $tid => $term) {
          // @todo - elife - nlisgo - add class for specific display channel
          $items[] = l($term->extraFields->name, 'taxonomy/term/' . $tid, ['attributes' => ['class' => ['category-display-channel']]]);
        }
      }
    }
  }
  return $items;
}

/**
 * Prepare heading links.
 *
 * @param ArticleVersion $article_version
 *   Article Object.
 *
 * @return array
 *   Array of heading links
 */
function _elife_article_heading_links(ArticleVersion $article_version) {
  $items = [];
  if (!empty($article_version->getHeadings())) {
    $query = new EntityFieldQueryExtraFields();
    $query->entityCondition('entity_type', 'taxonomy_term');
    $query->entityCondition('bundle', 'elife_headings');
    $query->propertyCondition('name', $article_version->getHeadings(), 'IN');
    $query->addExtraField('', 'name', 'name', 'taxonomy_term_data');
    if ($result = $query->execute()) {
      if (isset($result['taxonomy_term']) && !empty($result['taxonomy_term'])) {
        foreach ($result['taxonomy_term'] as $tid => $term) {
          $items[] = l($term->extraFields->name, 'taxonomy/term/' . $tid, ['attributes' => ['class' => ['category-heading']]]);
        }
      }
    }
  }
  return $items;
}

/**
 * Prepare keyword links.
 *
 * @param ArticleVersion $article_version
 *   Article Object.
 *
 * @return array
 *   Array of keyword links
 */
function _elife_article_keyword_links(ArticleVersion $article_version, $excludes = ['Other', 'None']) {
  $items = [];
  $keyword_groups = $article_version->getKeywords();
  if (!empty($keyword_groups)) {
    $keywords = [];
    foreach ($keyword_groups as $group => $group_keywords) {
      foreach ($group_keywords as $group_keyword) {
        if (!in_array($group_keyword, $excludes)) {
          $keywords[] = $group_keyword;
        }
      }
    }
    if (!empty($keywords)) {
      $query = new EntityFieldQueryExtraFields();
      $query->entityCondition('entity_type', 'taxonomy_term');
      $query->entityCondition('bundle', 'elife_keywords');
      $query->fieldCondition('field_elife_a_full_title', 'value', $keywords, 'IN');
      $query->addExtraField('field_elife_a_full_title', 'value', 'value');
      if ($result = $query->execute()) {
        if (isset($result['taxonomy_term']) && !empty($result['taxonomy_term'])) {
          foreach ($result['taxonomy_term'] as $tid => $term) {
            $items[] = l(_elife_article_xmltohtml($term->extraFields->field_elife_a_full_title_value), 'taxonomy/term/' . $tid, ['html' => TRUE, 'attributes' => ['class' => ['keyword']]]);
          }
        }
      }
    }
  }
  return $items;
}
