<?php

/**
 * @file
 * elife_services.module
 *
 * A collection of resources needed to provide a reliable service end point.
 */

/**
 * Implements hook_rest_server_request_parsers_alter().
 */
function elife_services_rest_server_request_parsers_alter(&$parsers) {
  // We just want raw JSON.
  $parsers['application/json'] = 'eLifeServicesStringParser';
}

/**
 * Implements hook_rest_server_response_formatters_alter().
 */
function elife_services_rest_server_response_formatters_alter(&$formatters) {
  // We already have JSON.
  $formatters['json']['formatter class'] = 'eLifeServicesStringFormatter';
}

/**
 * Implements hook_services_resources().
 */
function elife_services_services_resources() {
  $api = array(
    'article' => array(
      '#api_version' => 3002,
      'operations' => array(

        // Define the retrieve callback for a GET to /article/%article-version-id.json.
        'retrieve' => array(
          'help' => 'Returns a single article specified by the article version id.',
          'callback' => '_elife_services_article_retrieve',
          'file' => array(
            'type' => 'inc',
            'module' => 'elife_services',
            'name' => 'resources/article',
          ),
          'access callback' => '_elife_services_article_retrieve_access',
          'access arguments append' => TRUE,
          'args' => array(
            array(
              'name' => 'article_version_id',
              'type' => 'string',
              'description' => 'The article version id of the article to retrieve.',
              'optional' => FALSE,
              'source' => array('path' => 0),
            ),
          ),
        ),

        // Define the create callback for a POST to /article.
        'create' => array(
          'help' => 'Creates a new article for the current API user.',
          'callback' => '_elife_services_article_create',
          'file' => array('type' => 'inc',
            'module' => 'elife_services',
            'name' => 'resources/article',
          ),
          'access callback' => '_elife_services_article_create_access',
          'args' => array(
            array(
              'name' => 'data',
              'type' => 'string',
              'description' => 'The article data to set on create.',
              'optional' => FALSE,
              'source' => 'data',
            ),
          ),
        ),

        // Define the update callback for a PUT to /article/%article-version-id.json.
        'update' => array(
          'help' => 'Updates a single article specified by the article version id.',
          'callback' => '_elife_services_article_update',
          'file' => array('type' => 'inc',
            'module' => 'elife_services',
            'name' => 'resources/article',
          ),
          'access callback' => '_elife_services_article_update_access',
          'access arguments append' => TRUE,
          'args' => array(
            array(
              'name' => 'article_version_id',
              'type' => 'string',
              'description' => 'The article version id of the article to update.',
              'optional' => FALSE,
              'source' => array('path' => 0),
            ),
            array(
              'name' => 'data',
              'type' => 'string',
              'description' => 'The article data to update.',
              'optional' => FALSE,
              'source' => 'data',
            ),
          ),
        ),

        // Define the update callback for a DELETE to /article/%article-version-id.json.
        'delete' => array(
          'help' => 'Delete a single article specified by the article version id.',
          'callback' => '_elife_services_article_delete',
          'file' => array('type' => 'inc',
            'module' => 'elife_services',
            'name' => 'resources/article',
          ),
          'access callback' => '_elife_services_article_delete_access',
          'access arguments append' => TRUE,
          'args' => array(
            array(
              'name' => 'article_version_id',
              'type' => 'string',
              'description' => 'The article version id of the article to delete.',
              'optional' => FALSE,
              'source' => array('path' => 0),
            ),
          ),
        ),
      ),
    ),
    'publish' => array(
      '#api_version' => 3002,
      'operations' => array(

        // Define the update callback for a PUT to /publish/%article-version-id.json.
        'update' => array(
          'help' => 'Publish a single article specified by the article version id.',
          'callback' => '_elife_services_publish',
          'file' => array('type' => 'inc',
            'module' => 'elife_services',
            'name' => 'resources/publish',
          ),
          'access callback' => '_elife_services_publish_access',
          'access arguments append' => TRUE,
          'args' => array(
            array(
              'name' => 'article_version_id',
              'type' => 'string',
              'description' => 'The article version id of the article to publish.',
              'optional' => FALSE,
              'source' => array('path' => 0),
            ),
            array(
              'name' => 'data',
              'type' => 'string',
              'description' => 'The publish data to process.',
              'optional' => FALSE,
              'source' => 'data',
            ),
          ),
        ),
      ),
    ),
  );
  return $api;
}

/**
 * Get user id for current user.
 *
 * @return int
 *   User uid.
 */
function _elife_services_user_uid() {
  $cache = &drupal_static(__FUNCTION__, FALSE);

  if ($cache === FALSE) {
    global $user;
    // @todo - elife - nlisgo - Improve this when we have introduced authentication.
    $cache = user_is_anonymous() ? 1 : $user->uid;
  }

  return $cache;
}
